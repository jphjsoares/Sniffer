DONE ----> Manually look for interfaces and loop through them and add scroll

DONE ----> Set gaps on the button and the text area (Probably use grid layout)

DONE ----> Make text area and button be relative to window size

DONE ----> Add interface ID for every found interface

DONE ----> Create an input location

DONE ----> Do multiple checks on the input location

DONE ----> Create error message

DONE ----> Call the function to monitor network with user input

DONE ----> Make sniffed packets visible in the GUI (THE PACKETS WILL ONLY APPEAR AFTER THE LOOP IS DONE)
        We are better off using concurrency here!

DONE ----> To be able to stop during the sniffing, add a button to "end sniff"

DONE ----> Be able to resume the thread after pausing it!

DONE ----> Change what is shown on the main output

DONE ----> Output the stats at the end of the sniff

DONE ----> Probably make another class for packet sniffing frames

DONE ----> Make sniffing window resizable

----> Kill all threads when end of sniff button is pressed


FEATURES

----> Hugeeee refactor of all code

----> After scroll up, continue to scroll down when scroll is put back to the bottom

----> Make every packet clickable to see details about each packet

----> Make app run in the background and use it as a bandwith monitor

----> Make interfaces clickable

----> If being used as bandwith monitor, show most used services

----> Let the user be able to choose how much time/packets to handle

----> Let the user choose what he wants to see

----> While sniffing, print out some statistics

----> Give the size of all the packets

----> Use whois to let the user know what IP is being responsible for most of the traffic
